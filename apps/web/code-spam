'use client';

import { useEffect, useState } from 'react';
import { FaMagnifyingGlass } from 'react-icons/fa6';
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from '@/components/ui/accordion';
import { Card, CardContent } from '@/components/ui/card';
import Image from 'next/image';
import { IoLocationSharp } from 'react-icons/io5';
import { FaCalendarAlt } from 'react-icons/fa';
import { useDebouncedCallback } from 'use-debounce';
// import { useMutation } from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';
import instance from '@/utils/axiosInstance/axiosInstance';
import toast from 'react-hot-toast';
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation';

export default function Explore({ searchParams }: { searchParams: any }) {
    const [dataEvent, setDataEvent] = useState([]);
    const [searchInput, setSearchInput] = useState<string>('');
    const [limitData, setLimitData] = useState(8);
    const [page, setPage] = useState(1);
    const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
    const [minPrice, setMinPrice] = useState<number | null>(null);
    const [maxPrice, setMaxPrice] = useState<number | null>(null);
    const [dateFrom, setDateFrom] = useState<string | null>(null);
    const [dateUntil, setDateUntil] = useState<string | null>(null);
    const [location, setLocation] = useState<string>('');

    const router = useRouter();
    const params = useSearchParams();
    // const paramsUrl = new URLSearchParams(params);
    // console.log(paramsUrl, '<<<<<<<<<<<<');

    console.log(searchParams, 'ini search params');


    const { data: querySearchData } = useQuery({
        queryKey: ['search-data', searchInput, page, selectedCategory, minPrice, maxPrice, location, dateFrom, dateUntil],
        queryFn: async (values) => {
            const res = await instance.get('/event/search', {
                params: {
                    event: values,
                    page: page,
                    limit_data: limitData,
                    // category: searchParams.category || selectedCategory,
                    category: selectedCategory,
                    minPrice: minPrice,
                    maxPrice: maxPrice,
                    location: location,
                    dateFrom: dateFrom,
                    dateUntil: dateUntil,
                },
            });
            return res.data.data;
        }
    });

    // const { mutate: mutateSearchData } = useMutation({
    //     mutationFn: async (values: string) => {
    //         const res = await instance.get('/event/search', {
    //             params: {
    //                 event: values,
    //                 page: page,
    //                 limit_data: limitData,
    //                 category: searchParams.category || selectedCategory,
    //                 minPrice: minPrice,
    //                 maxPrice: maxPrice,
    //                 location: location,
    //                 dateFrom: dateFrom,
    //                 dateUntil: dateUntil,
    //             },
    //         });

    //         return res.data.data;
    //     },
    //     onSuccess: (res) => {
    //         console.log(res);
    //         setDataEvent(res);
    //     },
    //     onError: (err: any) => {
    //         toast.error(err.response.data.message);
    //         console.log(err);
    //     },
    // });
    // http://localhost:3000/event/explore?
    // axios.get('/event?search=event%202&')

    const debounce = useDebouncedCallback((values) => {
        if (values) {
            // let currentUrl = '?';

            // paramsUrl.set('search', values);
            // for (let [key, value] of paramsUrl) {
            //     currentUrl += `${key}=${value}&`;
            // }

            // router.push(currentUrl);
            // router.refresh();
            setSearchInput(values);
            setPage(1);
        }
    }, 500);

    // const onCategoryEvent = (value: any) => {
    //     setSelectedCategory(value);
    //     console.log(setSelectedCategory, '<<<<<<<<<<<<iniselectedcategory')
    //     let currentUrl = '?';
    //     paramsUrl.set('category', value);
    //     for (let [key, value] of paramsUrl) {
    //         currentUrl += `${key}=${value}&`;
    //     }
    //     console.log(currentUrl);

    // if (currentUrl[currentUrl.length - 1] === '&')
    //     currentUrl = currentUrl.slice(0, currentUrl.length - 1);
    //     router.push(currentUrl);
    //     router.refresh();
    // };

    // const onStartPriceEvent = (value: any) => {
    //     let currentUrl = '?';

    //     paramsUrl.set('startPrice', value);
    //     for (let [key, value] of paramsUrl) {
    //         currentUrl += `${key}=${value}&`;
    //     }

    //     if (currentUrl[currentUrl.length - 1] === '&')
    //         currentUrl = currentUrl.slice(0, currentUrl.length - 1);
    //     setMinPrice(value);
    //     router.push(currentUrl);
    //     router.refresh();
    // };

    // const onEndPriceEvent = (value: any) => {
    //     let currentUrl = '?';

    //     paramsUrl.set('endPrice', value);
    //     for (let [key, value] of paramsUrl) {
    //         currentUrl += `${key}=${value}&`;
    //     }

    //     if (currentUrl[currentUrl.length - 1] === '&')
    //         currentUrl = currentUrl.slice(0, currentUrl.length - 1);
    //     setMaxPrice(value);
    //     router.push(currentUrl);
    //     router.refresh();
    // };

    // const onStartDateEvent = (value: any) => {
    //     let currentUrl = '?';

    //     // http://8000/event/search??startDate=value
    //     paramsUrl.set('startDate', value);
    //     for (let [key, value] of paramsUrl) {
    //         currentUrl += `${key}=${value}&`;
    //     }

    //     if (currentUrl[currentUrl.length - 1] === '&')
    //         currentUrl = currentUrl.slice(0, currentUrl.length - 1);
    //     setDateFrom(value);
    //     router.push(currentUrl);
    //     router.refresh();
    // };

    // const onCEndDateEvent = (value: any) => {
    //     let currentUrl = '?';

    //     paramsUrl.set('endDate', value);
    //     for (let [key, value] of paramsUrl) {
    //         currentUrl += `${key}=${value}&`;
    //     }

    //     if (currentUrl[currentUrl.length - 1] === '&')
    //         currentUrl = currentUrl.slice(0, currentUrl.length - 1);
    //     setDateUntil(value);

    // setTimeout(router.push(currentUrl), 1000);
    // setTimeout(router.refresh(), 1000);
    // };

    useEffect(() => {
        const currentUrl = new URLSearchParams(searchParams);
        currentUrl.set(`page`, page.toString())
        currentUrl.set(`search`, search.toString())
        currentUrl.set(`category`, selectedCategory)
        currentUrl.set(`minPrice`, toString())
        currentUrl.set(`maxPrice`, page.toString())
        currentUrl.set(`dateFrom`, page.toString())
        currentUrl.set(`dateUntil`, page.toString())
        currentUrl.set(`location`, page.toString())

        router.push(`${pathname}?${currentUrl.toString()}`)
    }, [page, search, category, minPrice, maxPrice, dateFrom, dateUntil, location])


    // useEffect(() => {
    // }, [searchInput, page, selectedCategory, minPrice, maxPrice, location, dateFrom, dateUntil, mutateSearchData]);

    return (
        <main className="pt-28 px-20 flex gap-5">
            <section className="w-1/4 bg-white rounded-lg border border-gray-50 drop-shadow-lg p-4 h-fit">
                <div className="flex flex-col justify-center font-bold text-xl">
                    <div className="flex justify-center">Filter</div>
                    <button
                        onClick={() => {
                            setSelectedCategory(null),
                                setMinPrice(null),
                                setMaxPrice(null),
                                setDateFrom(null),
                                setDateUntil(null),
                                setLocation(''),
                                setSearchInput('');
                            // router.push('/event/explore?')
                            // router.refresh()
                        }}
                        className="text-base font-normal text-blue-600 onClick:font-bold transision-all duration-300 ease-in-out"
                    >
                        Reset Filter
                    </button>
                    <div className="relative flex justify-end py-5">
                        <input
                            type="text"
                            // value={searchInput}
                            onChange={(e) => debounce(e.target.value)}
                            placeholder="Search..."
                            className="border px-4 py-2 pr-10 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />

                        <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                            <FaMagnifyingGlass />
                        </div>
                    </div>
                    <div>
                        <Accordion type="multiple" collapsible className="w-full">
                            <AccordionItem value="item-1">
                                <AccordionTrigger>Tipe Event</AccordionTrigger>
                                <AccordionContent>
                                    <div>
                                        <div className="flex flex-col space-y-2 mt-2">
                                            <label className="flex items-center space-x-2">
                                                <input
                                                    type="radio"
                                                    name="category"
                                                    value={1}
                                                    onChange={(e) =>
                                                        setSelectedCategory(parseInt(e.target.value))
                                                    }
                                                    className="form-radio text-blue-600 focus:ring-blue-500"
                                                />
                                                <span>Music</span>
                                            </label>
                                            <label className="flex items-center space-x-2">
                                                <input
                                                    type="radio"
                                                    name="category"
                                                    value={2}
                                                    onChange={(e) =>
                                                        setSelectedCategory(parseInt(e.target.value))
                                                    }
                                                    className="form-radio text-blue-600 focus:ring-blue-500"
                                                />
                                                <span>Sports</span>
                                            </label>
                                            <label className="flex items-center space-x-2">
                                                <input
                                                    type="radio"
                                                    name="category"
                                                    value={6}
                                                    onChange={(e) =>
                                                        setSelectedCategory(parseInt(e.target.value))
                                                    }
                                                    className="form-radio text-blue-600 focus:ring-blue-500"
                                                />
                                                <span>Art</span>
                                            </label>
                                        </div>
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                            <AccordionItem value="item-2">
                                <AccordionTrigger>Harga</AccordionTrigger>
                                <AccordionContent className="flex flex-col items-start gap-2">
                                    <div>
                                        <div className="flex space-x-2 mt-2">
                                            <input
                                                type="number"
                                                name="minPrice"
                                                value={minPrice ?? ''}
                                                placeholder="Min"
                                                className="w-1/2 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                                                onChange={(e) =>
                                                    setMinPrice(parseInt(e.target.value))
                                                }
                                            />
                                            <input
                                                type="number"
                                                name="maxPrice"
                                                value={maxPrice ?? ''}
                                                placeholder="Max"
                                                className="w-1/2 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                                                onChange={(e) =>
                                                    setMaxPrice(parseInt(e.target.value))
                                                }
                                            />
                                        </div>
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                            <AccordionItem value="item-3">
                                <AccordionTrigger>Tanggal</AccordionTrigger>
                                <AccordionContent>
                                    <div>
                                        <div className="flex space-x-2 mt-2">
                                            <label className="flex flex-col">
                                                <span className="text-sm text-gray-500">
                                                    Start Date
                                                </span>
                                                <input
                                                    type="date"
                                                    name="startDate"
                                                    value={dateFrom ?? ''}
                                                    onChange={(e) => setDateFrom(e.target.value)}
                                                    className="border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                                                />
                                            </label>
                                            <label className="flex flex-col">
                                                <span className="text-sm text-gray-500">End Date</span>
                                                <input
                                                    type="date"
                                                    name="endDate"
                                                    value={dateUntil ?? ''}
                                                    onChange={(e) => setDateUntil(e.target.value)}
                                                    className="border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                                                />
                                            </label>
                                        </div>
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                            <AccordionItem value="item-4">
                                <AccordionTrigger>Lokasi</AccordionTrigger>
                                <AccordionContent>
                                    <input
                                        type="text"
                                        name="location"
                                        value={location}
                                        placeholder="Lokasi"
                                        className="w-1/2 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                                        onChange={(e) => setLocation(e.target.value)}
                                    />
                                </AccordionContent>
                            </AccordionItem>
                        </Accordion>
                    </div>
                </div>
            </section>

            <div className="flex flex-col">
                <section className="w-fit ">
                    <div className="grid grid-cols-4 gap-4">
                        {dataEvent?.eventSearch?.map((item: any, index: any) => {
                            return (
                                <Card key={index} className="h-[200px] lg:h-fit pb-4">
                                    <Link
                                        href={`/event/explore/${item.id}TBX${item.startEvent.split('T')[0].split('-').join('')} ${item.eventName.toLowerCase()}`}
                                    >
                                        <CardContent className="flex items-center justify-center w-full h-full rounded-2xl">
                                            <div className="bg-white w-[180px] lg:w-full lg:h-full rounded-2xl">
                                                <div className="w-full lg:h-fit">
                                                    <Image
                                                        src="https://assets.loket.com/neo/production/images/banner/20241019183718_671399eea31a2.jpg"
                                                        height={142}
                                                        width={142}
                                                        alt="testing"
                                                        className="w-full lg:h-fit object-cover rounded-t-2xl"
                                                    />
                                                </div>
                                                <div className="text-black p-3 pt-5">
                                                    <div className="flex flex-col gap-2">
                                                        <h1 className="flex items-center gap-2 text-xs lg:text-sm text-gray-500">
                                                            <IoLocationSharp />
                                                            {item?.location}
                                                        </h1>
                                                        <h1 className="flex items-center gap-2 text-xs lg:text-sm text-gray-500 font-normal">
                                                            <FaCalendarAlt />
                                                            {item?.startEvent
                                                                .split('T')[0]
                                                                .split('-')
                                                                .join('/')}{' '}
                                                            -{' '}
                                                            {item?.endEvent
                                                                .split('T')[0]
                                                                .split('-')
                                                                .join('/')}
                                                        </h1>
                                                    </div>
                                                    {item?.eventName.length > 10 ? (
                                                        <h1 className="text-black text-sm lg:text-lg mt-2 font-bold">
                                                            {item?.eventName.slice(0, 11)}..
                                                        </h1>
                                                    ) : (
                                                        <h1 className="text-black text-sm lg:text-lg mt-2 font-bold">
                                                            {item?.eventName}
                                                        </h1>
                                                    )}
                                                    <h1 className="text-xs lg:text-sm  mt-2 bottom-0 text-gray-500 font-normal">
                                                        Mulai dari{' '}
                                                    </h1>
                                                    <div className=" flex justify-between">
                                                        <h1 className="text-sm lg:text-base   bottom-0 text-orange-600 font-bold">
                                                            {' '}
                                                            RP. {item?.tickets[0]?.price}
                                                        </h1>
                                                        <h1 className="text-xs lg:text-sm   bottom-0 text-green-500">
                                                            {' '}
                                                            Tiket Tersedia
                                                        </h1>
                                                    </div>
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Link>
                                </Card>
                            );
                        })}
                    </div>
                </section>
                <section className="flex justify-center mt-6">
                    {Array(dataEvent?.totalPage).fill(0).map((item, index) => {
                        return (
                            <button
                                key={index}
                                className="join-item btn btn-sm mx-2 border rounded-lg w-10 h-10 hover:bg-slate-400  hover:font-bold transition-all active:bg-yellow-500  focus:ring focus:bg-blue-950 focus:text-white duration-300 ease-in-out "
                                onClick={() => setPage(index + 1)}
                            >
                                {index + 1}
                            </button>
                        );
                    })}
                </section>
            </div>
        </main>
    );
}


kode event create --
'use client';

import React, { useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import { useMutation, useQuery } from '@tanstack/react-query';
import instance from '@/utils/axiosInstance/axiosInstance';
import { EventSchema } from '@/features/event/schema/eventSchemas';
import { MdOutlineAccessTimeFilled } from 'react-icons/md';
import { toast } from 'react-hot-toast'
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { FaRegTrashAlt } from "react-icons/fa";



const EventForm = () => {
    const { mutate: mutationCreateEvent } = useMutation({
        mutationFn: async (values: FormData) => {
            console.log(values);
            return await instance.post('/event/new-event', values);
        },
        onSuccess: (res) => {
            toast.success('beerhasil')
            console.log(res);
        },
        onError: (error) => {
            toast.error('error bro')
            console.log(error);
        },
    });
    const { data: getCategory } = useQuery({
        queryKey: ['get-category'],
        queryFn: async () => {
            const res = await instance.get('/category');
            return res.data.data;
        },
    });

    const [newTicket, setNewTicket] = useState({
        price: 0,
        ticketName: '',
        ticketType: '',
        seatAvailable: 0,
        discount: 0,
        startDate: '',
        endDate: '',
    });

    const [isPaid, setIsPaid] = useState(true)

    return (
        <main className="bg-white p-5 px-20">
            <Formik
                initialValues={{
                    eventName: '',
                    location: '',
                    locationUrl: '',
                    description: '',
                    isPaid: true,
                    startEvent: '',
                    endEvent: '',
                    categoryId: '',
                    price: 0,
                    ticketName: '',
                    ticketType: '',
                    seatAvailable: 0,
                    discount: 0,
                    startDate: '',
                    endDate: '',
                    tickets: [],
                }}

                validateOnChange={true}
                validateOnBlur={true}
                // validationSchema={EventSchema}
                onSubmit={(values: any) => {
                    console.log([values]);
                    const fd = new FormData();
                    fd.append('eventName', values.eventName);
                    fd.append('location', values.location);
                    fd.append('locationUrl', values.locationUrl);
                    fd.append('description', values.description);
                    fd.append('isPaid', values.isPaid);
                    fd.append('startEvent', values.startEvent);
                    fd.append('endEvent', values.endEvent);
                    fd.append('artist', values.artist);
                    fd.append('categoryId', values.categoryId);

                    const ticketsEvent = values?.tickets!.map(
                        (ticket: any, index: any) => {
                            return {
                                price: Number(ticket.price),
                                ticketName: ticket.ticketName,
                                ticketType: ticket.ticketType,
                                seatAvailable: Number(ticket.seatAvailable),
                                version: ticket.version,
                                discount: Number(ticket.discount),
                                startDate: new Date(ticket.startDate),
                                endDate: new Date(ticket.endDate),
                            };
                        },
                    );

                    console.log(ticketsEvent);
                    fd.append(`tickets`, JSON.stringify(ticketsEvent));

                    values.images.forEach((image: any, index: any) => {
                        fd.append(`images`, image);
                    });

                    mutationCreateEvent(fd);
                }}
            >
                {({ values, setFieldValue }) => (
                    <Form className=''>
                        <section className="bg-white flex flex-col justify-center rounded-xl h-fit pb-24 w-full border border-gray-200 shadow-lg p-5">
                            <div className="flex justify-center font-bold text-2xl pb-5">
                                Event
                            </div>
                            <div className="grid grid-cols-2 gap-4 px-40">
                                <div className="flex flex-col relative">
                                    <label className=" text-sm">Nama Event</label>
                                    <Field
                                        name="eventName"
                                        placeholder="Nama Acara"
                                        className="border border-gray-500 rounded-md p-2"
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="eventName" component="div" className='text-xs text-red-600' />
                                    </div>

                                </div>
                                <div className="flex flex-col">
                                    <label className=" text-sm">Kategori</label>
                                    <Field
                                        as="select"
                                        name="categoryId"
                                        placeholder="ID Kategori"
                                        className="border border-gray-500 rounded-md p-2"
                                    >
                                        <option disabled value="">
                                            -- Pilih Kategori --
                                        </option>
                                        {getCategory?.length > 0 &&
                                            getCategory?.map((item: any, i: any) => (
                                                <option value={item?.id} key={i}>
                                                    {item?.Category}
                                                </option>
                                            ))}
                                    </Field>
                                    <div className='h-1'>
                                        <ErrorMessage name="categoryId" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                                <div className="flex flex-col">
                                    <label className=" text-sm">
                                        Event Start Date
                                    </label>
                                    <Field
                                        name="startEvent"
                                        placeholder="Tanggal Mulai"
                                        type="datetime-local"
                                        className="border border-gray-500 rounded-md p-2"
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="startEvent" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                                <div className="flex flex-col">
                                    <label className=" text-sm">Event End Date</label>
                                    <Field
                                        name="endEvent"
                                        placeholder="Tanggal Akhir"
                                        type="datetime-local"
                                        className="border border-gray-500 rounded-md p-2"
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="endEvent" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>

                                <div className="flex flex-col">
                                    <label className=" text-sm">Lokasi</label>
                                    <Field
                                        name="location"
                                        placeholder="Lokasi"
                                        className="border border-gray-500 rounded-md p-2"
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="location" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                                <div className="flex flex-col">
                                    <label className=" text-sm">Lokasi Google Map</label>
                                    <Field
                                        name="locationUrl"
                                        placeholder="https://maps.app.goo.gl/ACXwTUMJQ8xSTnyq7"
                                        className="border border-gray-500 rounded-md p-2"
                                        type="text"
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="locationUrl" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>

                                <div className="flex items-center justify-center gap-5 col-span-2">
                                    <label className=" text-sm">Berbayar</label>
                                    <Field
                                        type="checkbox"
                                        name="isPaid"
                                        className="border border-gray-500 rounded-md p-2"
                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                                            const checked = e.target.checked;
                                            setIsPaid(checked);
                                            setFieldValue("isPaid", checked);
                                            setFieldValue("price", checked ? values.price : 0);
                                            setFieldValue("discount", checked ? values.discount : 0);
                                        }}
                                        defaultChecked={values.isPaid}
                                    />
                                </div>
                                <div className="flex flex-col col-span-2">
                                    <label className="font-bold text-sm">Deskripsi</label>
                                    <ReactQuill
                                        value={values.description}
                                        onChange={(html) => setFieldValue('description', html)}
                                        className="h-full w-full"
                                    />
                                </div>
                            </div>
                        </section>

                        <div className="bg-white flex flex-col mt-8 px-10 rounded-xl h-fit w-full border border-gray-200 shadow-lg p-5">
                            <h3 className="flex justify-center font-bold text-2xl pb-5">
                                Upload Gambar Event
                            </h3>
                            <div className="grid grid-cols-3 gap-4">
                                <label className="text-sm border border-gray-300 rounded-md p-3 text-center">
                                    <b>Gambar 1</b>: Ukuran 1170 x 570px tidak lebih dari 1Mb
                                    (Format JPG, JPEG, PNG)
                                    <input
                                        id='gambar1'
                                        name='gambar1'
                                        type="file"
                                        accept="image/*"
                                        onChange={(event: any) =>
                                            setFieldValue(
                                                'images[0]',
                                                event?.currentTarget?.files[0],
                                            )
                                        }
                                        className="mx-auto"
                                    />
                                </label>
                                <label className="text-sm border border-gray-300 rounded-md p-3 text-center">
                                    <b>Gambar 2</b>: Ukuran 500 x 500px tidak lebih dari 1Mb
                                    (Format JPG, JPEG, PNG)
                                    <input
                                        type="file"
                                        accept="image/*"
                                        name='gambar2'
                                        onChange={(event: any) =>
                                            setFieldValue(
                                                'images[1]',
                                                event?.currentTarget?.files[0],
                                            )
                                        }
                                    />
                                </label>
                                <label className="text-sm border border-gray-300 rounded-md p-3 text-center">
                                    <b>Gambar 3</b>: Ukuran 1000 x 1000px tidak lebih dari 2Mb
                                    (Format JPG, JPEG, PNG)
                                    <input
                                        type="file"
                                        accept="image/*"
                                        name='gambar3'

                                        onChange={(event: any) =>
                                            setFieldValue(
                                                'images[2]',
                                                event?.currentTarget?.files[0],
                                            )
                                        }
                                    />
                                </label>
                            </div>

                            <div className='h-1'>
                                <ErrorMessage name="gambar1" component="div" className='text-xs text-red-600' />
                            </div>
                        </div>

                        <div className="px-40 rounded-xl  mt-8 h-fit w-full border border-gray-200 shadow-lg p-5" >
                            <h3 className="flex justify-center font-bold text-2xl mt-8 pb-5">
                                Tambah Tiket Baru
                            </h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div className="flex flex-col col-span-2">
                                    <label className=" text-sm">Nama Tiket</label>
                                    <Field
                                        name="ticketName"
                                        placeholder="Nama Tiket"
                                        // value={newTicket.ticketName}
                                        className="border border-gray-500 rounded-md p-2"
                                    // onChange={(e: any) =>
                                    //     setNewTicket({
                                    //         ...newTicket,
                                    //         ticketName: e.target.value,
                                    //     })
                                    // }
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="ticketName" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                                <div className="flex flex-col col-span-2">
                                    <label className=" text-sm">Tipe Tiket</label>
                                    <Field
                                        name="ticketType"
                                        placeholder="Tipe Tiket"
                                        className="border border-gray-500 rounded-md p-2"

                                    // value={newTicket.ticketType}
                                    // onChange={(e: any) =>
                                    //     setNewTicket({
                                    //         ...newTicket,
                                    //         ticketType: e.target.value,
                                    //     })
                                    // }
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="ticketType" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>

                                {isPaid && (
                                    <div className="flex flex-col col-span-2">
                                        <label className=" text-sm">Harga</label>
                                        <Field
                                            name="price"
                                            placeholder="Harga"
                                            type="number"
                                            className="border border-gray-500 rounded-md p-2"

                                        // value={newTicket.price}
                                        // onChange={(e: any) =>
                                        //     setNewTicket({
                                        //         ...newTicket,
                                        //         price: Number(e.target.value),
                                        //     })
                                        // }
                                        />
                                        <div className='h-1'>
                                            <ErrorMessage name="price" component="div" className='text-xs text-red-600' />
                                        </div>
                                    </div>
                                )}
                                <div className="flex flex-col col-span-2">
                                    <label className=" text-sm">Kuota Kursi</label>
                                    <Field
                                        name="seatAvailable"
                                        placeholder="Kuota Kursi"
                                        type="number"
                                        className="border border-gray-500 rounded-md p-2"

                                    // value={newTicket.seatAvailable}
                                    // onChange={(e: any) =>
                                    //     setNewTicket({
                                    //         ...newTicket,
                                    //         seatAvailable: Number(e.target.value),
                                    //     })
                                    // }
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="seatAvailable" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>

                                {isPaid && (
                                    <div className="flex flex-col col-span-2">
                                        <label className=" text-sm">Diskon</label>
                                        <Field
                                            name="discount"
                                            placeholder="Diskon"
                                            type="number"
                                            className="border border-gray-500 rounded-md p-2"

                                        // value={newTicket.discount}
                                        // onChange={(e: any) =>
                                        //     setNewTicket({
                                        //         ...newTicket,
                                        //         discount: Number(e.target.value),
                                        //     })
                                        // }
                                        />
                                        <ErrorMessage name="discount" component="div" className='text-xs text-red-600' />

                                    </div>
                                )}
                                <div className="flex flex-col col-span-2">
                                    <label className=" text-sm">Tanggal Mulai</label>
                                    <Field
                                        name="startDate"
                                        type="datetime-local"
                                        // value={newTicket.startDate}
                                        className="border border-gray-500 rounded-md p-2"
                                    // onChange={(e: any) =>
                                    //     setNewTicket({
                                    //         ...newTicket,
                                    //         startDate: e.target.value,
                                    //     })
                                    // }
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="startDate" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                                <div className="flex flex-col col-span-2">
                                    <label className=" text-sm">Tanggal Berakhir</label>
                                    <Field
                                        name="endDate"
                                        type="datetime-local"
                                        className="border border-gray-500 rounded-md p-2"

                                    // value={newTicket.endDate}
                                    // onChange={(e: any) =>
                                    //     setNewTicket({ ...newTicket, endDate: e.target.value })
                                    // }
                                    />
                                    <div className='h-1'>
                                        <ErrorMessage name="endDate" component="div" className='text-xs text-red-600' />
                                    </div>
                                </div>
                            </div>
                            <button
                                type="button"
                                onClick={() => {
                                    console.log(values)
                                    setFieldValue('tickets', [...values.tickets, {
                                        price: values.price,
                                        ticketName: values.ticketName,
                                        ticketType: values.ticketType,
                                        seatAvailable: values.seatAvailable,
                                        discount: values.discount,
                                        startDate: values.startDate,
                                        endDate: values.endDate,
                                    }]);
                                }}
                                className="bg-blue-500 text-white rounded-md p-3 mt-4 flex justify-center"
                            >

                                Tambah Tiket
                            </button>
                            <ErrorMessage name="tickets" component="div" className='text-xs text-red-600' />
                        </div>

                        <div>
                            <h3 className='flex justify-center font-bold text-2xl mt-8 pb-5 mb-4'>Daftar Tiket</h3>
                            {values.tickets.map((ticket: any, index: any) => (
                                <div key={index} className="bg-blue-50 p-4 mb-2 rounded-lg border border-blue-200 shadow-md w-full mx-auto">
                                    <div className="flex justify-between items-start">
                                        <div>
                                            <h3 className="text-lg font-semibold">
                                                {ticket.ticketName}
                                            </h3>
                                            <p className="text-gray-600 mt-1">
                                                {ticket.ticketType}
                                            </p>
                                            <div className="text-blue-600 mt-2">
                                                <span className="flex items-center flex-col">
                                                    <div className='flex items-center gap-1'>
                                                        <MdOutlineAccessTimeFilled />
                                                        Start : {ticket.startDate.split('T')[0]} • {ticket.startDate.split('T')[1]}
                                                    </div>
                                                    <div className='flex items-center gap-1'>
                                                        <MdOutlineAccessTimeFilled />
                                                        End : {ticket.endDate.split('T')[0]} • {ticket.endDate.split('T')[1]}
                                                    </div>
                                                </span>
                                            </div>
                                        </div>
                                        <button
                                            type="button"
                                            onClick={() => {
                                                const updatedTickets = values.tickets.filter((_: any, i: any) => i !== index);
                                                setFieldValue('tickets', updatedTickets);
                                            }}
                                            className="text-red-500"
                                        >
                                            <FaRegTrashAlt />
                                        </button>
                                    </div>
                                    <hr className="my-4 border-blue-300 border-dashed" />
                                    <div className="flex justify-between items-center">
                                        <p className="text-xl font-semibold">
                                            {ticket.discount > 0 ? (
                                                <div>
                                                    <span className="line-through mr-2 text-gray-500">Rp.{ticket.price}</span>
                                                    <span className="text-red-600">
                                                        Rp.{ticket.price - ticket.discount}
                                                    </span>
                                                </div>
                                            ) : (
                                                    `Rp${ticket.price.toLocaleString("id-ID")}`
                                            )}
                                        </p>
                                        <div className="flex items-center space-x-4">
                                            Seat Available : {ticket.seatAvailable}
                                        </div>
                                    </div>
                                </div>


                            ))}
                        </div>
                        <div className="flex justify-center mt-8">
                            <button
                                type="submit"
                                className="bg-blue-500 text-white rounded-md p-3"
                            >
                                Buat Event
                            </button>
                        </div>
                    </Form>
                )}
            </Formik>
        </main>
    );
};

export default EventForm;
